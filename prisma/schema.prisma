// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your actual database provider
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkUserId String   @unique
  email       String   @unique
  name        String?
  imageUrl    String?
  industry    String? // This will be populated by the career suggestions step
  subIndustry String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bio         String?
  experience  Int? // Years of Professional Experience
  skills      String[] // Textual skills, populated after ML suggestions/manual choice

  // New ML Model Input Fields
  fieldOfStudy              String?
  gpa                       Float?
  extracurricularActivities Int?
  internships               Int?
  projects                  Int?
  leadershipPositions       Int? // 0 or 1
  fieldSpecificCourses      Int?
  researchExperience        Int? // 0 or 1
  codingSkills              Int? // Ordinal 0-4
  communicationSkills       Int? // Ordinal 0-4
  problemSolvingSkills      Int? // Ordinal 0-4
  teamworkSkills            Int? // Ordinal 0-4
  analyticalSkills          Int? // Ordinal 0-4
  presentationSkills        Int? // Ordinal 0-4
  networkingSkills          Int? // Ordinal 0-4
  industryCertifications    Int? // 0 or 1

  // Relationships
  assessments     Assessment[]
  resumes         Resume[]
  coverLetters    CoverLetter[]
  industryInsight IndustryInsight? @relation(fields: [industry, subIndustry], references: [industry, subIndustry], name: "UserToIndustryInsight", onDelete: SetNull, onUpdate: Cascade)

  @@index([clerkUserId])
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizScore      Float
  questions      Json[]
  improvementTip String?
  category       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  status         String   @default("draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id                String   @id @default(cuid())
  industry          String
  subIndustry       String
  salaryRanges      Json[]
  growthRate        Float
  demandLevel       String
  topSkills         String[]
  marketOutlook     String
  keyTrends         String[]
  recommendedSkills String[]
  lastUpdated       DateTime @default(now()) @updatedAt
  nextUpdate        DateTime

  users User[] @relation("UserToIndustryInsight")

  @@unique([industry, subIndustry], name: "IndustrySubIndustryUnique")
  @@index([industry])
}
