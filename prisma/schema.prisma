// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your actual database provider
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(cuid())
  clerkUserId             String   @unique
  email                   String   @unique
  name                    String?
  imageUrl                String?
  industry                String?
  subIndustry             String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  bio                     String?
  experience              Int?
  skills                  String[]
  fieldOfStudy            String?
  gpa                     Float?
  extracurricularActivities Int?
  internships             Int?
  projects                Int?
  leadershipPositions     Int?
  fieldSpecificCourses    Int?
  researchExperience      Int?
  codingSkills            Int?
  communicationSkills     Int?
  problemSolvingSkills    Int?
  teamworkSkills          Int?
  analyticalSkills        Int?
  presentationSkills      Int?
  networkingSkills        Int?
  industryCertifications  Int?
  assessments             Assessment[]
  resumes                 Resume[]
  coverLetters            CoverLetter[]
  industryInsight         IndustryInsight? @relation(fields: [industry, subIndustry], references: [industry, subIndustry], name: "UserToIndustryInsight", onDelete: SetNull, onUpdate: Cascade)

  @@index([clerkUserId])
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizScore      Float
  questions      Json[]
  improvementTip String?
  category       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     String?   // Make the old content field optional
  jsonContent Json?     // Add the new field for structured data
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  status         String   @default("draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id                String   @id @default(cuid())
  industry          String
  subIndustry       String
  salaryRanges      Json[]
  growthRate        Float
  demandLevel       String
  topSkills         String[]
  marketOutlook     String
  keyTrends         String[]
  recommendedSkills String[]
  lastUpdated       DateTime @default(now()) @updatedAt
  nextUpdate        DateTime
  users             User[]   @relation("UserToIndustryInsight")

  @@unique([industry, subIndustry], name: "IndustrySubIndustryUnique")
  @@index([industry])
}